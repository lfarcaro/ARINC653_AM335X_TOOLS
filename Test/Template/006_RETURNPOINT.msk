MASK_START
SNIPPET_START CREATE_ERROR_HANDLER_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_PARTITION_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START CREATE_PROCESS_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START GET_ERROR_STATUS_ERROR_HANDLING_CODE
			while (true) {
			}
SNIPPET_END
SNIPPET_START GLOBAL_INCLUDES
// Test include
#include "test.h"
SNIPPET_END
SNIPPET_START MODULE_DEFAULTPARTITION_INITIALIZATION
	// Starts up test
	TEST_STARTUP();

	// Creates error handler
	CREATE_ERROR_HANDLER(null, 256, &RETURN_CODE);
	if (RETURN_CODE != INVALID_MODE) {
		while (true) {
		}
	}
SNIPPET_END
SNIPPET_START MODULE_DEFAULTPARTITION_VARIABLES
SNIPPET_END
SNIPPET_START MODULE_DESCRIPTION
SNIPPET_END
SNIPPET_START MODULE_FUNCTIONS
SNIPPET_END
SNIPPET_START MODULE_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START MODULE_IDLEPARTITION_CODE
	// Raises application error
	RAISE_APPLICATION_ERROR(APPLICATION_ERROR, (MESSAGE_ADDR_TYPE) "FROM MODULE IDLE PARTITION", 26, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}

	// In case the compiler does not add a
	// return point for the main function
	while (true) {
	}
SNIPPET_END
SNIPPET_START MODULE_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_ERRORHANDLER_CODE
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_ERRORHANDLER_INITIALIZATION
	// Sets LEDs pattern for some time
	for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
		TEST_LED1_OFF();
		TEST_LED2_ON();
	}
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_ERRORHANDLER_TERMINATION
	// Raises application error
	RAISE_APPLICATION_ERROR(APPLICATION_ERROR, (MESSAGE_ADDR_TYPE) "FROM PARTITION1 ERROR HANDLER", 29, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}

	// Turns off LEDs
	TEST_LED1_OFF();
	TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_ERRORHANDLER_VARIABLES
	portUINT32 UI32_COUNTER1 = 0;
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_IDLEPROCESS_CODE
	// Raises application error
	RAISE_APPLICATION_ERROR(APPLICATION_ERROR, (MESSAGE_ADDR_TYPE) "FROM PARTITION1 idle process", 27, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}

	// Turns off LEDs
	TEST_LED1_OFF();
	TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_CODE
	// Sets LEDs pattern for some time
	for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
		TEST_LED1_ON();
		TEST_LED2_OFF();
	}

	// Raises application error
	RAISE_APPLICATION_ERROR(APPLICATION_ERROR, (MESSAGE_ADDR_TYPE) "FROM PROCESS1", 13, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}

	// Turns off LEDs
	TEST_LED1_OFF();
	TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS1_PROCESS_VARIABLES
	RETURN_CODE_TYPE RETURN_CODE;
	portUINT32 UI32_COUNTER1 = 0;
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_CODE
	// Sets LEDs pattern for some time
	for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
		TEST_LED1_ON();
		TEST_LED2_OFF();
	}

	// Raises application error
	RAISE_APPLICATION_ERROR(APPLICATION_ERROR, (MESSAGE_ADDR_TYPE) "FROM PROCESS2", 13, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}

	// Turns off LEDs
	TEST_LED1_OFF();
	TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION1_PARTITION_PROCESS2_PROCESS_VARIABLES
	RETURN_CODE_TYPE RETURN_CODE;
	portUINT32 UI32_COUNTER1 = 0;
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_ERRORHANDLER_CODE
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_ERRORHANDLER_INITIALIZATION
	// Sets LEDs pattern for some time
	for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
		TEST_LED1_OFF();
		TEST_LED2_ON();
	}
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_ERRORHANDLER_TERMINATION
	// Raises application error
	RAISE_APPLICATION_ERROR(APPLICATION_ERROR, (MESSAGE_ADDR_TYPE) "FROM PARTITION2 ERROR HANDLER", 29, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}

	// Turns off LEDs
	TEST_LED1_OFF();
	TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_ERRORHANDLER_VARIABLES
	portUINT32 UI32_COUNTER1 = 0;
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_IDLEPROCESS_CODE
	// Raises application error
	RAISE_APPLICATION_ERROR(APPLICATION_ERROR, (MESSAGE_ADDR_TYPE) "FROM PARTITION2 idle process", 27, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}

	// Turns off LEDs
	TEST_LED1_OFF();
	TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION2_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_INITIALIZATION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DEFAULTPROCESS_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_DESCRIPTION
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_ERRORHANDLER_CODE
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_ERRORHANDLER_INITIALIZATION
	// Sets LEDs pattern for some time
	for (UI32_COUNTER1 = 0; UI32_COUNTER1 < TEST_COUNTER_TINYSMALL; UI32_COUNTER1++) {
		TEST_LED1_OFF();
		TEST_LED2_ON();
	}
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_ERRORHANDLER_TERMINATION
	// Raises application error
	RAISE_APPLICATION_ERROR(APPLICATION_ERROR, (MESSAGE_ADDR_TYPE) "FROM PARTITION3 ERROR HANDLER", 29, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}

	// Turns off LEDs
	TEST_LED1_OFF();
	TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_ERRORHANDLER_VARIABLES
	portUINT32 UI32_COUNTER1 = 0;
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_FUNCTIONS
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_GLOBAL_VARIABLES
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_IDLEPROCESS_CODE
	// Raises application error
	RAISE_APPLICATION_ERROR(APPLICATION_ERROR, (MESSAGE_ADDR_TYPE) "FROM PARTITION3 idle process", 27, &RETURN_CODE);
	if (RETURN_CODE != NO_ERROR) {
		while (true) {
		}
	}

	// Turns off LEDs
	TEST_LED1_OFF();
	TEST_LED2_OFF();
SNIPPET_END
SNIPPET_START PARTITION3_PARTITION_INCLUDES
SNIPPET_END
SNIPPET_START SET_MODULE_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START SET_PARTITION_MODE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_MODULE_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START STARTUP_SYSTEM_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
SNIPPET_START START_ERROR_HANDLING_CODE
		while (true) {
		}
SNIPPET_END
MASK_END
